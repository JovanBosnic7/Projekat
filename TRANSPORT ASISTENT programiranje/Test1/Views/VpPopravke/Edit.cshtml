@model DDtrafic.ViewModels.PopravkeIndexData

@{
    @Styles.Render("~/Content/new.css")
    ViewBag.Title = "Izmena popravki";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="page-heading">
    <h1 class="heading-title">
        Izmena popravki
        <br />
        <small style="font-size:16px; font-weight:600;">Vozilo: @Model.Registracija</small>

    </h1>
    <ol class="breadcrumb">
        <li class="breadcrumb-item">
            <a href="../Popravke">Popravke</a>
        </li>
        <li class="breadcrumb-item active">Izmeni</li>
    </ol>
</div>
<hr />

<div class="row" style="background:#eee;padding:20px; margin:0; border-radius:3px;">

    @using (Html.BeginForm("Edit", "VpPopravke", FormMethod.Post, new { onkeydown = "return event.keyCode!=13" }))

    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id, new { id = "Id" })
        @Html.HiddenFor(model => model.VpId, new { id = "VpId" })

        <div class="ui-widget">
            <label class="control-label col-sm-2" for="vozilo">Vozilo </label>
            <div class="col-sm-10">
                <input id="vozilo" class="form-control" value="@ViewBag.Oznaka">
            </div>
        </div>
        <div>
            <label class="control-label col-sm-2">Tip</label>
            <div class="col-sm-10">
                @Html.DropDownList("TipId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.TipId, "", new { @class = "text-danger" })
            </div>
        </div>
        <div>
            <label class="control-label col-sm-2">Datum</label>
            <div class="col-sm-10">
                @Html.TextBoxFor(model => model.Datum, "{0:dd-MM-yyyy}", new { @class = " form-control  datepicker-dat-kreiranja" })
            </div>
        </div>
        <div>
            <label class="control-label col-sm-2">Delovi</label>
            <div class="col-sm-10">
                @Html.EditorFor(model => model.Delovi, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Delovi, "", new { @class = "text-danger" })
            </div>
        </div>
        <div>
            <label class="control-label col-sm-2">Br. računa</label>
            <div class="col-sm-10">
                @Html.EditorFor(model => model.BrojRacuna, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.BrojRacuna, "", new { @class = "text-danger" })
            </div>
        </div>
        <div>
            <label class="control-label col-sm-2">Dinara</label>
            <div class="col-sm-10">
                @Html.EditorFor(model => model.IznosDin, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.IznosDin, "", new { @class = "text-danger" })
            </div>
        </div>

        <div>
            <label class="control-label col-sm-2">Eura</label>
            <div class="col-sm-10">
                @Html.EditorFor(model => model.IznosEur, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.IznosEur, "", new { @class = "text-danger" })
            </div>
        </div>
        <div>
            <label class="control-label col-sm-2">Napomena</label>
            <div class="col-sm-10">
                @Html.EditorFor(model => model.Napomena, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Napomena, "", new { @class = "text-danger" })
            </div>
        </div>
        <div>
            <label class="control-label col-sm-2"></label>
            <div class="col-sm-10">
                <div class="col-sm-4">
                    <input type="submit" value="Sačuvaj" class="btn btn-primary pull-right " />
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryDatePickerForm")
    @Scripts.Render("~/bundles/jqueryval")
    @*<link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css">
        <script src="//code.jquery.com/jquery-1.12.4.js"></script>
        <script src="//code.jquery.com/ui/1.12.1/jquery-ui.js"></script>*@
    <script type="text/javascript">

        $('.datepicker-dat-kreiranja').datepicker({ dateFormat: 'dd-mm-yy' });
        $('.datepicker-dat-kreiranja').attr("autocomplete", "off");

        $(document).ready(function () {

            $("#vozilo").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: "/Alarmi/GetVozila?query=" + request.term,
                        dataType: "json",
                        success: function (data) {
                            response($.map(data, function (v, i) {
                                return {
                                    value: v.Name,
                                    id: v.Id
                                };
                            }));
                        }
                    })
                },
                minLength: 2,
                select: function (event, ui) {
                    $('#VpId').val(ui.item.id);
                }
            });
        });

        $.validator.methods.date = function (value, element) {
            return this.optional(element) || moment(value, "dd-mm-yy", true).isValid();
        }

        function OnSuccess(response) {
            alert(response);
            window.close();
        }

        function OnFailure(response) {
            alert(response);
        }

        $(function () {
            $.validator.methods.date = function (value, element) {
                if ($.browser.webkit) {
                    //ES - Chrome does not use the locale when new Date objects instantiated:
                    var d = new Date();

                    return this.optional(element) || !/Invalid|NaN/.test(new Date(d.toLocaleDateString(value)));
                }
                else {
                    return this.optional(element) || !/Invalid|NaN/.test(new Date(value));
                }
            };
        });


    </script>
}

